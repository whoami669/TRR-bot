import discord
from discord.ext import commands
from discord import app_commands
import logging

logger = logging.getLogger(__name__)

class HelpSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    @app_commands.command(name="help", description="Comprehensive bot help and command list")
    @app_commands.describe(category="Specific help category")
    @app_commands.choices(category=[
        app_commands.Choice(name="AI & Intelligence", value="ai"),
        app_commands.Choice(name="Server Management", value="server"),
        app_commands.Choice(name="Games & Entertainment", value="games"),
        app_commands.Choice(name="Web Tools", value="web"),
        app_commands.Choice(name="Utilities", value="utilities"),
        app_commands.Choice(name="Moderation", value="moderation"),
        app_commands.Choice(name="Analytics", value="analytics"),
        app_commands.Choice(name="All Commands", value="all")
    ])
    async def help_command(self, interaction: discord.Interaction, category: str = "overview"):
        await interaction.response.defer()
        
        try:
            if category == "overview":
                embed = self.create_overview_embed()
            elif category == "ai":
                embed = self.create_ai_help_embed()
            elif category == "server":
                embed = self.create_server_help_embed()
            elif category == "games":
                embed = self.create_games_help_embed()
            elif category == "web":
                embed = self.create_web_help_embed()
            elif category == "utilities":
                embed = self.create_utilities_help_embed()
            elif category == "moderation":
                embed = self.create_moderation_help_embed()
            elif category == "analytics":
                embed = self.create_analytics_help_embed()
            elif category == "all":
                embed = self.create_all_commands_embed()
            else:
                embed = self.create_overview_embed()
            
            await interaction.followup.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Help command error: {e}")
            await interaction.followup.send("Failed to display help information.")

    def create_overview_embed(self):
        embed = discord.Embed(
            title="ü§ñ Ultra Discord Bot - Command Overview",
            description="A comprehensive Discord bot with advanced AI, server management, games, and web tools.",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üß† AI & Intelligence",
            value="‚Ä¢ `/ai` - Chat with GPT-4o with memory\n‚Ä¢ `/ai-clear` - Clear conversation\n‚Ä¢ `/analyze-image` - AI vision analysis\n‚Ä¢ `/generate-image` - DALL-E image generation\n‚Ä¢ `/code-review` - AI code analysis",
            inline=False
        )
        
        embed.add_field(
            name="üéÆ Games & Entertainment",
            value="‚Ä¢ `/trivia` - Multi-category trivia\n‚Ä¢ `/word-chain` - Word association game\n‚Ä¢ `/guess-number` - Number guessing\n‚Ä¢ `/rock-paper-scissors` - RPS with tournaments\n‚Ä¢ `/riddle` - Riddles with hints",
            inline=False
        )
        
        embed.add_field(
            name="üåê Web Tools",
            value="‚Ä¢ `/url-info` - Website analysis\n‚Ä¢ `/ip-lookup` - IP geolocation\n‚Ä¢ `/speed-test` - Connection speed\n‚Ä¢ `/http-headers` - Header analysis\n‚Ä¢ `/ssl-check` - Certificate info",
            inline=False
        )
        
        embed.add_field(
            name="üõ†Ô∏è Utilities",
            value="‚Ä¢ `/qr-code` - Generate QR codes\n‚Ä¢ `/password-generator` - Secure passwords\n‚Ä¢ `/reminder` - Smart reminders\n‚Ä¢ `/text-analysis` - Text metrics\n‚Ä¢ `/color-palette` - Color tools",
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è Server Management",
            value="‚Ä¢ `/server-stats` - Detailed analytics\n‚Ä¢ `/cleanup-channels` - Remove inactive\n‚Ä¢ `/role-manager` - Advanced roles\n‚Ä¢ `/backup-server` - Configuration backup\n‚Ä¢ `/member-activity` - Activity analysis",
            inline=False
        )
        
        embed.set_footer(text="Use '/help category' for detailed command information")
        return embed

    def create_ai_help_embed(self):
        embed = discord.Embed(
            title="üß† AI & Intelligence Commands",
            description="Advanced AI-powered features with OpenAI integration",
            color=discord.Color.green()
        )
        
        embed.add_field(
            name="üí¨ `/ai`",
            value="**Enhanced AI Chat with Memory**\n‚Ä¢ Conversation memory per channel\n‚Ä¢ Multiple model options (GPT-4o, GPT-4, GPT-3.5)\n‚Ä¢ Custom system prompts\n‚Ä¢ Response time tracking\n‚Ä¢ Token usage analytics",
            inline=False
        )
        
        embed.add_field(
            name="üßπ `/ai-clear`",
            value="**Clear Conversation Memory**\n‚Ä¢ Reset AI context for current channel\n‚Ä¢ Fresh conversation start\n‚Ä¢ Useful for topic changes",
            inline=False
        )
        
        embed.add_field(
            name="üì∏ `/analyze-image`",
            value="**AI Vision Analysis**\n‚Ä¢ Upload any image for analysis\n‚Ä¢ Detailed descriptions\n‚Ä¢ Object recognition\n‚Ä¢ Scene understanding\n‚Ä¢ High/low detail options",
            inline=False
        )
        
        embed.add_field(
            name="üé® `/generate-image`",
            value="**DALL-E Image Generation**\n‚Ä¢ Create images from text\n‚Ä¢ Multiple sizes and styles\n‚Ä¢ HD quality options\n‚Ä¢ Vivid or natural styles",
            inline=False
        )
        
        embed.add_field(
            name="üîç `/code-review`",
            value="**AI Code Analysis**\n‚Ä¢ Review code quality\n‚Ä¢ Security suggestions\n‚Ä¢ Best practices\n‚Ä¢ Performance optimization tips",
            inline=False
        )
        
        embed.add_field(
            name="üìä `/ai-stats`",
            value="**Usage Statistics**\n‚Ä¢ Personal AI usage tracking\n‚Ä¢ Token consumption\n‚Ä¢ Command frequency\n‚Ä¢ Historical data",
            inline=False
        )
        
        embed.set_footer(text="All AI features require valid OpenAI API key")
        return embed

    def create_games_help_embed(self):
        embed = discord.Embed(
            title="üéÆ Games & Entertainment Commands",
            description="Interactive games and entertainment features",
            color=discord.Color.orange()
        )
        
        embed.add_field(
            name="üß† `/trivia`",
            value="**Multi-Category Trivia**\n‚Ä¢ Categories: General, Science, History, Gaming, Tech\n‚Ä¢ Difficulty levels: Easy, Medium, Hard\n‚Ä¢ Customizable question count\n‚Ä¢ Scoring system with leaderboards",
            inline=False
        )
        
        embed.add_field(
            name="üîó `/word-chain`",
            value="**Word Association Game**\n‚Ä¢ Multi-player word chains\n‚Ä¢ Themed categories available\n‚Ä¢ Time limits per turn\n‚Ä¢ Anti-repeat protection\n‚Ä¢ Turn-based gameplay",
            inline=False
        )
        
        embed.add_field(
            name="üéØ `/guess-number`",
            value="**Number Guessing Challenge**\n‚Ä¢ Customizable number ranges\n‚Ä¢ Adjustable guess limits\n‚Ä¢ Hint system (too high/low)\n‚Ä¢ Time tracking\n‚Ä¢ Personal best scores",
            inline=False
        )
        
        embed.add_field(
            name="‚úÇÔ∏è `/rock-paper-scissors`",
            value="**Enhanced RPS**\n‚Ä¢ 1v1 battles\n‚Ä¢ Tournament mode\n‚Ä¢ Best-of-series format\n‚Ä¢ DM-based moves\n‚Ä¢ Elimination brackets",
            inline=False
        )
        
        embed.add_field(
            name="üß© `/riddle`",
            value="**Riddle Challenges**\n‚Ä¢ Difficulty levels\n‚Ä¢ Progressive hint system\n‚Ä¢ Scoring based on hints used\n‚Ä¢ Time tracking\n‚Ä¢ Various riddle categories",
            inline=False
        )
        
        embed.add_field(
            name="üí° `/hint`",
            value="**Get Riddle Hints**\n‚Ä¢ Progressive clue system\n‚Ä¢ Limited hints per riddle\n‚Ä¢ Score impact tracking",
            inline=False
        )
        
        embed.set_footer(text="All games support score tracking and leaderboards")
        return embed

    def create_web_help_embed(self):
        embed = discord.Embed(
            title="üåê Web Tools Commands",
            description="Comprehensive web analysis and testing tools",
            color=discord.Color.purple()
        )
        
        embed.add_field(
            name="üîç `/url-info`",
            value="**Website Analysis**\n‚Ä¢ Page title extraction\n‚Ä¢ Meta description\n‚Ä¢ Server information\n‚Ä¢ Response codes\n‚Ä¢ Security headers check\n‚Ä¢ Content type analysis",
            inline=False
        )
        
        embed.add_field(
            name="üåç `/ip-lookup`",
            value="**IP Geolocation**\n‚Ä¢ Geographic location\n‚Ä¢ ISP information\n‚Ä¢ Organization details\n‚Ä¢ Timezone data\n‚Ä¢ Proxy/VPN detection\n‚Ä¢ AS number lookup",
            inline=False
        )
        
        embed.add_field(
            name="‚ö° `/speed-test`",
            value="**Connection Speed Test**\n‚Ä¢ Download speed measurement\n‚Ä¢ Server response time\n‚Ä¢ Connection quality analysis\n‚Ä¢ Real-time testing",
            inline=False
        )
        
        embed.add_field(
            name="üìã `/http-headers`",
            value="**HTTP Header Analysis**\n‚Ä¢ Complete header listing\n‚Ä¢ Security header verification\n‚Ä¢ Cache configuration\n‚Ä¢ Server technology detection\n‚Ä¢ Categorized display",
            inline=False
        )
        
        embed.add_field(
            name="üîí `/ssl-check`",
            value="**SSL Certificate Info**\n‚Ä¢ Certificate validity\n‚Ä¢ Expiration dates\n‚Ä¢ Issuer information\n‚Ä¢ Security algorithms\n‚Ä¢ Chain verification",
            inline=False
        )
        
        embed.add_field(
            name="üåê `/domain-whois`",
            value="**Domain WHOIS Lookup**\n‚Ä¢ Registration information\n‚Ä¢ Expiration dates\n‚Ä¢ Registrar details\n‚Ä¢ DNS servers\n‚Ä¢ Contact information",
            inline=False
        )
        
        embed.set_footer(text="Web tools provide real-time data from external services")
        return embed

    def create_utilities_help_embed(self):
        embed = discord.Embed(
            title="üõ†Ô∏è Utility Commands",
            description="Powerful productivity and utility tools",
            color=discord.Color.gold()
        )
        
        embed.add_field(
            name="üì± `/qr-code`",
            value="**QR Code Generator**\n‚Ä¢ Custom text encoding\n‚Ä¢ Adjustable sizes\n‚Ä¢ Color customization\n‚Ä¢ Background options\n‚Ä¢ High-quality output",
            inline=False
        )
        
        embed.add_field(
            name="üîê `/password-generator`",
            value="**Secure Password Creation**\n‚Ä¢ Customizable length (8-128)\n‚Ä¢ Symbol inclusion options\n‚Ä¢ Number preferences\n‚Ä¢ Ambiguous character filtering\n‚Ä¢ Strength analysis",
            inline=False
        )
        
        embed.add_field(
            name="‚è∞ `/reminder`",
            value="**Smart Reminder System**\n‚Ä¢ Flexible time formats (5m, 2h, 1d)\n‚Ä¢ Repeat intervals\n‚Ä¢ Private DM options\n‚Ä¢ Channel notifications\n‚Ä¢ Persistent storage",
            inline=False
        )
        
        embed.add_field(
            name="üìä `/text-analysis`",
            value="**Advanced Text Metrics**\n‚Ä¢ Word/character counts\n‚Ä¢ Reading time estimation\n‚Ä¢ Language detection\n‚Ä¢ Readability scoring\n‚Ä¢ Frequency analysis",
            inline=False
        )
        
        embed.add_field(
            name="üé® `/color-palette`",
            value="**Color Tools**\n‚Ä¢ Palette generation\n‚Ä¢ Color format conversion\n‚Ä¢ Complementary schemes\n‚Ä¢ Monochromatic variations\n‚Ä¢ Visual swatches",
            inline=False
        )
        
        embed.add_field(
            name="üîó `/url-shortener`",
            value="**URL Shortening**\n‚Ä¢ Custom aliases\n‚Ä¢ Click tracking\n‚Ä¢ Analytics dashboard\n‚Ä¢ Expiration options",
            inline=False
        )
        
        embed.set_footer(text="Utilities are designed for maximum productivity")
        return embed

    def create_server_help_embed(self):
        embed = discord.Embed(
            title="‚öôÔ∏è Server Management Commands",
            description="Advanced server administration and analytics",
            color=discord.Color.red()
        )
        
        embed.add_field(
            name="üìä `/server-stats`",
            value="**Comprehensive Server Analytics**\n‚Ä¢ Member statistics\n‚Ä¢ Channel breakdown\n‚Ä¢ Activity metrics\n‚Ä¢ Growth tracking\n‚Ä¢ Most active users\n‚Ä¢ Server information",
            inline=False
        )
        
        embed.add_field(
            name="üßπ `/cleanup-channels`",
            value="**Channel Cleanup Tool**\n‚Ä¢ Identify inactive channels\n‚Ä¢ Customizable inactivity period\n‚Ä¢ Dry-run preview mode\n‚Ä¢ Batch deletion\n‚Ä¢ Safety confirmations",
            inline=False
        )
        
        embed.add_field(
            name="üëë `/role-manager`",
            value="**Advanced Role Management**\n‚Ä¢ Assign/remove roles\n‚Ä¢ Role information display\n‚Ä¢ Bulk operations\n‚Ä¢ Permission analysis\n‚Ä¢ Audit logging",
            inline=False
        )
        
        embed.add_field(
            name="üíæ `/backup-server`",
            value="**Server Configuration Backup**\n‚Ä¢ Complete server settings\n‚Ä¢ Channel structure\n‚Ä¢ Role configurations\n‚Ä¢ Permission overwrites\n‚Ä¢ Downloadable files",
            inline=False
        )
        
        embed.add_field(
            name="üìà `/member-activity`",
            value="**Activity Pattern Analysis**\n‚Ä¢ Individual user metrics\n‚Ä¢ Server-wide statistics\n‚Ä¢ Activity trends\n‚Ä¢ Engagement scoring\n‚Ä¢ Historical data",
            inline=False
        )
        
        embed.set_footer(text="Server management requires appropriate permissions")
        return embed

    def create_moderation_help_embed(self):
        embed = discord.Embed(
            title="üõ°Ô∏è Moderation Commands",
            description="Advanced moderation and security features",
            color=discord.Color.dark_red()
        )
        
        embed.add_field(
            name="üîç `/ai-review`",
            value="**AI-Powered User Analysis**\n‚Ä¢ Behavior pattern detection\n‚Ä¢ Risk assessment\n‚Ä¢ Content analysis\n‚Ä¢ Automated reports\n‚Ä¢ Recommendation system",
            inline=False
        )
        
        embed.add_field(
            name="üîí `/lockdown`",
            value="**Server Lockdown System**\n‚Ä¢ Multiple intensity levels\n‚Ä¢ Timed restrictions\n‚Ä¢ Automatic unlock\n‚Ä¢ Emergency protocols",
            inline=False
        )
        
        embed.add_field(
            name="üö´ `/content-filter`",
            value="**Advanced Content Filtering**\n‚Ä¢ Custom pattern detection\n‚Ä¢ Severity levels\n‚Ä¢ Automated actions\n‚Ä¢ Whitelist management",
            inline=False
        )
        
        embed.add_field(
            name="‚öñÔ∏è `/ban-appeal`",
            value="**Ban Appeal System**\n‚Ä¢ Structured appeal process\n‚Ä¢ AI-assisted review\n‚Ä¢ Decision tracking\n‚Ä¢ Automated notifications",
            inline=False
        )
        
        embed.set_footer(text="Moderation features require moderator permissions")
        return embed

    def create_analytics_help_embed(self):
        embed = discord.Embed(
            title="üìä Analytics Commands",
            description="Detailed server and user analytics",
            color=discord.Color.teal()
        )
        
        embed.add_field(
            name="üìà `/view-analytics`",
            value="**Server Analytics Dashboard**\n‚Ä¢ Message trends\n‚Ä¢ User activity patterns\n‚Ä¢ Growth metrics\n‚Ä¢ Engagement rates",
            inline=False
        )
        
        embed.add_field(
            name="üë§ `/user-statistics`",
            value="**Individual User Metrics**\n‚Ä¢ Message frequency\n‚Ä¢ Activity periods\n‚Ä¢ Engagement scoring\n‚Ä¢ Historical trends",
            inline=False
        )
        
        embed.add_field(
            name="üè• `/server-health`",
            value="**Server Health Monitor**\n‚Ä¢ Performance metrics\n‚Ä¢ System status\n‚Ä¢ Resource usage\n‚Ä¢ Optimization suggestions",
            inline=False
        )
        
        embed.add_field(
            name="üì§ `/export-data`",
            value="**Data Export Tools**\n‚Ä¢ Analytics exports\n‚Ä¢ Report generation\n‚Ä¢ Historical data\n‚Ä¢ Custom formats",
            inline=False
        )
        
        embed.set_footer(text="Analytics provide insights for server optimization")
        return embed

    def create_all_commands_embed(self):
        embed = discord.Embed(
            title="üìö Complete Command Reference",
            description="All available bot commands organized by category",
            color=discord.Color.blurple()
        )
        
        ai_commands = "ai, ai-clear, analyze-image, generate-image, code-review, ai-stats"
        games_commands = "trivia, word-chain, guess-number, rock-paper-scissors, riddle, hint"
        web_commands = "url-info, ip-lookup, speed-test, http-headers, ssl-check, domain-whois"
        utility_commands = "qr-code, password-generator, reminder, text-analysis, color-palette, url-shortener"
        server_commands = "server-stats, cleanup-channels, role-manager, backup-server, member-activity"
        mod_commands = "ai-review, lockdown, content-filter, ban-appeal, suspicious-alert"
        
        embed.add_field(name="üß† AI Commands", value=f"`/{ai_commands.replace(', ', '`, `/') + '`'}", inline=False)
        embed.add_field(name="üéÆ Games", value=f"`/{games_commands.replace(', ', '`, `/') + '`'}", inline=False)
        embed.add_field(name="üåê Web Tools", value=f"`/{web_commands.replace(', ', '`, `/') + '`'}", inline=False)
        embed.add_field(name="üõ†Ô∏è Utilities", value=f"`/{utility_commands.replace(', ', '`, `/') + '`'}", inline=False)
        embed.add_field(name="‚öôÔ∏è Server Mgmt", value=f"`/{server_commands.replace(', ', '`, `/') + '`'}", inline=False)
        embed.add_field(name="üõ°Ô∏è Moderation", value=f"`/{mod_commands.replace(', ', '`, `/') + '`'}", inline=False)
        
        embed.add_field(
            name="üìä Quick Stats",
            value=f"**Total Commands:** 100+\n**Categories:** 6\n**Active Features:** All modules loaded",
            inline=False
        )
        
        embed.set_footer(text="Use '/help category' for detailed information about each category")
        return embed

async def setup(bot):
    await bot.add_cog(HelpSystem(bot))